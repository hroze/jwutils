This is JZBot's Factoid Language Reference.

<wiki:toc/>

=Preliminary=
This document focuses soley on JZBot's factoid language. It does not focus on how to create, delete, or invoke factoids. The idea is that this manual would be just as applicable to a standalone factoid language interpreter as it would be to JZBot itself.

=Overview=
JZBot's factoid language is (to my knowledge) a turing-complete language. It contains extensive data processing capabilities.

The factoid language was designed to be as unobtrusive as possible. By that, I mean that most simple pieces of text are valid factoid language programs that simply output their own text. To that end, all pieces of text that do not contain special character sequences are interpreted as literal text that is to be output or fed into a function.

The factoid language has only one datatype, which is *text*. I'll be referring to individual pieces of text as *strings* throughout this documentation. The reason for this choice is that a programming language with only a textual datatype is considerably easier to learn than one that has multiple datatypes.

There are three core concepts of the language syntax. The first concept serves to make the language turing-complete; the other two concepts are merely shorthand for the first.

==Functions==
The first concept is *functions*. A factoid language program can contain as many function calls as it wants. Custom functions themselves can't be written; custom factoids, however, can, and they are the primary mechanism for defining subroutines.

Functions accept as many arguments as are needed for the function to run. As with every other aspect of the language, function arguments are strings. Functions also return a value. This value is essentially placed where the function call was when the function is executed.

Function calls are defined using two braces. They are closed with two matching braces. Function arguments are separated by sequences of two pipe characters. The first argument is the name of the function to call, and the rest of the arguments are the arguments to pass to the function.

The list of functions included with the language is quite large. At the writing of this documentation, there are 119 functions. The complete list of functions is covered in [http://code.google.com/p/jzbot/wiki/FactoidFunctions this document]. If you're running a JZBot, you can also obtain a complete list of functions by sending "help functions" to your bot. Indeed, the document mentioned above is generated by a program written in factoid language that uses JZBot's built-in help system to build a list of functions.

String concatentation is automatic. If you put two strings next to each other, they are automatically concatenated. If you put a function next to a string, the function's return value (or output) is automatically concatenated with the string. For example, `{{numberlist||1||5}}` (see [http://code.google.com/p/jzbot/wiki/FactoidFunctions#numberlist Numberlist] for what the numberlist function does) returns "1 2 3 4 5", so `hello{{numberlist||1||5}}bye` results in "hello1 2 3 4 5bye".

In locations where boolean values are needed, these take the forms of the strings "1" and "0", for true and false respectively. 

Function calls can be embedded within other functions calls. For example, `{{if||{{eval||3>4}}||yes||no}}` results in "no". In this case, `{{eval||3>4}}` is run, which produces "0", since 3 is not greater than 4. The if function is then called like `{{if||0||yes||no}}`, which causes it to return "no".

Some functions actually run a particular argument multiple times. The [http://code.google.com/p/jzbot/wiki/FactoidFunctions#split split] function is an example of this. These functions are the way that looping is implemented in the factoid language. In fact, for loops are created using the split function and the numberlist function. For example, `{{split|| ||{{numberlist||1||5}}||thenumber||This is number {{lget||thenumber}} in the list|| -- }}` results in "This is number 1 -- This is number 2 -- This is number 3 -- This is number 4 -- This is number 5".

==Variables==
==Escapes==








